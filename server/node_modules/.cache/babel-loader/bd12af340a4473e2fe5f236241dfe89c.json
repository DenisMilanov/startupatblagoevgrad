{"ast":null,"code":"\"use strict\"; // Copyright 2018 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\denis\\\\OneDrive\\\\Documents\\\\GitHub\\\\startupatblagoevgrad-website\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\");\n\nvar _slicedToArray = require(\"C:/Users/denis/OneDrive/Documents/GitHub/startupatblagoevgrad-website/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nvar _createForOfIteratorHelper = require(\"C:/Users/denis/OneDrive/Documents/GitHub/startupatblagoevgrad-website/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/denis/OneDrive/Documents/GitHub/startupatblagoevgrad-website/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRetryConfig = void 0;\n\nfunction getRetryConfig(_x) {\n  return _getRetryConfig.apply(this, arguments);\n}\n\nfunction _getRetryConfig() {\n  _getRetryConfig = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(err) {\n    var _a, config, retryRanges, shouldRetryFn, retryDelay, delay, backoff;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            config = getConfig(err);\n\n            if (!(!err || !err.config || !config && !err.config.retry)) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {\n              shouldRetry: false\n            });\n\n          case 3:\n            config = config || {};\n            config.currentRetryAttempt = config.currentRetryAttempt || 0;\n            config.retry = config.retry === undefined || config.retry === null ? 3 : config.retry;\n            config.httpMethodsToRetry = config.httpMethodsToRetry || ['GET', 'HEAD', 'PUT', 'OPTIONS', 'DELETE'];\n            config.noResponseRetries = config.noResponseRetries === undefined || config.noResponseRetries === null ? 2 : config.noResponseRetries; // If this wasn't in the list of status codes where we want\n            // to automatically retry, return.\n\n            retryRanges = [// https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\n            // 1xx - Retry (Informational, request still processing)\n            // 2xx - Do not retry (Success)\n            // 3xx - Do not retry (Redirect)\n            // 4xx - Do not retry (Client errors)\n            // 429 - Retry (\"Too Many Requests\")\n            // 5xx - Retry (Server errors)\n            [100, 199], [429, 429], [500, 599]];\n            config.statusCodesToRetry = config.statusCodesToRetry || retryRanges; // Put the config back into the err\n\n            err.config.retryConfig = config; // Determine if we should retry the request\n\n            shouldRetryFn = config.shouldRetry || shouldRetryRequest;\n            _context.next = 14;\n            return shouldRetryFn(err);\n\n          case 14:\n            if (_context.sent) {\n              _context.next = 16;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {\n              shouldRetry: false,\n              config: err.config\n            });\n\n          case 16:\n            // Calculate time to wait with exponential backoff.\n            // If this is the first retry, look for a configured retryDelay.\n            retryDelay = config.currentRetryAttempt ? 0 : (_a = config.retryDelay) !== null && _a !== void 0 ? _a : 100; // Formula: retryDelay + ((2^c - 1 / 2) * 1000)\n\n            delay = retryDelay + (Math.pow(2, config.currentRetryAttempt) - 1) / 2 * 1000; // We're going to retry!  Incremenent the counter.\n\n            err.config.retryConfig.currentRetryAttempt += 1; // Create a promise that invokes the retry after the backOffDelay\n\n            backoff = new Promise(function (resolve) {\n              setTimeout(resolve, delay);\n            }); // Notify the user if they added an `onRetryAttempt` handler\n\n            if (config.onRetryAttempt) {\n              config.onRetryAttempt(err);\n            } // Return the promise in which recalls Gaxios to retry the request\n\n\n            _context.next = 23;\n            return backoff;\n\n          case 23:\n            return _context.abrupt(\"return\", {\n              shouldRetry: true,\n              config: err.config\n            });\n\n          case 24:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getRetryConfig.apply(this, arguments);\n}\n\nexports.getRetryConfig = getRetryConfig;\n/**\n * Determine based on config if we should retry the request.\n * @param err The GaxiosError passed to the interceptor.\n */\n\nfunction shouldRetryRequest(err) {\n  var config = getConfig(err); // node-fetch raises an AbortError if signaled:\n  // https://github.com/bitinn/node-fetch#request-cancellation-with-abortsignal\n\n  if (err.name === 'AbortError') {\n    return false;\n  } // If there's no config, or retries are disabled, return.\n\n\n  if (!config || config.retry === 0) {\n    return false;\n  } // Check if this error has no response (ETIMEDOUT, ENOTFOUND, etc)\n\n\n  if (!err.response && (config.currentRetryAttempt || 0) >= config.noResponseRetries) {\n    return false;\n  } // Only retry with configured HttpMethods.\n\n\n  if (!err.config.method || config.httpMethodsToRetry.indexOf(err.config.method.toUpperCase()) < 0) {\n    return false;\n  } // If this wasn't in the list of status codes where we want\n  // to automatically retry, return.\n\n\n  if (err.response && err.response.status) {\n    var isInRange = false;\n\n    var _iterator = _createForOfIteratorHelper(config.statusCodesToRetry),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _step$value = _slicedToArray(_step.value, 2),\n            min = _step$value[0],\n            max = _step$value[1];\n\n        var status = err.response.status;\n\n        if (status >= min && status <= max) {\n          isInRange = true;\n          break;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    if (!isInRange) {\n      return false;\n    }\n  } // If we are out of retry attempts, return\n\n\n  config.currentRetryAttempt = config.currentRetryAttempt || 0;\n\n  if (config.currentRetryAttempt >= config.retry) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Acquire the raxConfig object from an GaxiosError if available.\n * @param err The Gaxios error with a config object.\n */\n\n\nfunction getConfig(err) {\n  if (err && err.config && err.config.retryConfig) {\n    return err.config.retryConfig;\n  }\n\n  return;\n}","map":{"version":3,"mappings":"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","names":["getRetryConfig","err","config","getConfig","retry","shouldRetry","currentRetryAttempt","undefined","httpMethodsToRetry","noResponseRetries","retryRanges","statusCodesToRetry","retryConfig","shouldRetryFn","shouldRetryRequest","retryDelay","_a","delay","Math","pow","backoff","Promise","setTimeout","resolve","onRetryAttempt","exports","name","response","method","indexOf","toUpperCase","status","isInRange","min","max"],"sourceRoot":"","sources":["../../src/retry.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}