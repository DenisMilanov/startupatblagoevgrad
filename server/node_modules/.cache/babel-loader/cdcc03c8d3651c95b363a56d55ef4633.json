{"ast":null,"code":"import { useState, useEffect } from 'react'; // Hook\n\nvar cachedScripts = [];\n\nfunction useScript(src) {\n  var _a = useState(false),\n      loaded = _a[0],\n      setLoaded = _a[1];\n\n  var _b = useState(false),\n      error = _b[0],\n      setError = _b[1];\n\n  useEffect(function () {\n    // If cachedScripts array already includes src that means another instance ...\n    // ... of this hook already loaded this script, so no need to load again.\n    if (cachedScripts.includes(src)) {\n      setLoaded(true);\n      setError(false);\n    } else {\n      cachedScripts.push(src); // Create script\n\n      var script_1 = document.createElement('script');\n      script_1.src = src;\n      script_1.async = true; // Script event listener callbacks for load and error\n\n      var onScriptLoad_1 = function onScriptLoad_1() {\n        setLoaded(true);\n        setError(false);\n      };\n\n      var onScriptError_1 = function onScriptError_1() {\n        // Remove from cachedScripts we can try loading again\n        var index = cachedScripts.indexOf(src);\n\n        if (index >= 0) {\n          cachedScripts.splice(index, 1);\n        }\n\n        script_1.remove();\n        setLoaded(true);\n        setError(true);\n      };\n\n      script_1.addEventListener('load', onScriptLoad_1);\n      script_1.addEventListener('error', onScriptError_1); // Add script to document body\n\n      document.body.appendChild(script_1); // Remove event listeners on cleanup\n\n      return function () {\n        script_1.removeEventListener('load', onScriptLoad_1);\n        script_1.removeEventListener('error', onScriptError_1);\n      };\n    }\n  }, [src]); // Only re-run effect if script src changes\n\n  return [loaded, error];\n}\n\nvar useHubspotForm = function useHubspotForm(props) {\n  var _a = useScript('https://js.hsforms.net/forms/v2.js'),\n      loaded = _a[0],\n      error = _a[1];\n\n  var _b = useState(false),\n      formCreated = _b[0],\n      setFormCreated = _b[1];\n\n  useEffect(function () {\n    if (typeof window !== 'undefined' && window) {\n      var windowWithHubspot = window;\n\n      if (loaded && windowWithHubspot.hbspt && !formCreated) {\n        windowWithHubspot.hbspt.forms.create(props);\n        setFormCreated(true);\n      }\n    }\n  }, [loaded, formCreated, setFormCreated]);\n  return {\n    loaded: loaded,\n    formCreated: formCreated,\n    error: error\n  };\n};\n\nexport { useHubspotForm };","map":{"version":3,"sources":["C:/Users/denis/OneDrive/Documents/GitHub/startupatblagoevgrad-website/node_modules/@aaronhayes/react-use-hubspot-form/build/module/index.js"],"names":["useState","useEffect","cachedScripts","useScript","src","_a","loaded","setLoaded","_b","error","setError","includes","push","script_1","document","createElement","async","onScriptLoad_1","onScriptError_1","index","indexOf","splice","remove","addEventListener","body","appendChild","removeEventListener","useHubspotForm","props","formCreated","setFormCreated","window","windowWithHubspot","hbspt","forms","create"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\n\n// Hook\r\nvar cachedScripts = [];\r\nfunction useScript(src) {\r\n    var _a = useState(false), loaded = _a[0], setLoaded = _a[1];\r\n    var _b = useState(false), error = _b[0], setError = _b[1];\r\n    useEffect(function () {\r\n        // If cachedScripts array already includes src that means another instance ...\r\n        // ... of this hook already loaded this script, so no need to load again.\r\n        if (cachedScripts.includes(src)) {\r\n            setLoaded(true);\r\n            setError(false);\r\n        }\r\n        else {\r\n            cachedScripts.push(src);\r\n            // Create script\r\n            var script_1 = document.createElement('script');\r\n            script_1.src = src;\r\n            script_1.async = true;\r\n            // Script event listener callbacks for load and error\r\n            var onScriptLoad_1 = function () {\r\n                setLoaded(true);\r\n                setError(false);\r\n            };\r\n            var onScriptError_1 = function () {\r\n                // Remove from cachedScripts we can try loading again\r\n                var index = cachedScripts.indexOf(src);\r\n                if (index >= 0) {\r\n                    cachedScripts.splice(index, 1);\r\n                }\r\n                script_1.remove();\r\n                setLoaded(true);\r\n                setError(true);\r\n            };\r\n            script_1.addEventListener('load', onScriptLoad_1);\r\n            script_1.addEventListener('error', onScriptError_1);\r\n            // Add script to document body\r\n            document.body.appendChild(script_1);\r\n            // Remove event listeners on cleanup\r\n            return function () {\r\n                script_1.removeEventListener('load', onScriptLoad_1);\r\n                script_1.removeEventListener('error', onScriptError_1);\r\n            };\r\n        }\r\n    }, [src]); // Only re-run effect if script src changes\r\n    return [loaded, error];\r\n}\n\nvar useHubspotForm = function (props) {\r\n    var _a = useScript('https://js.hsforms.net/forms/v2.js'), loaded = _a[0], error = _a[1];\r\n    var _b = useState(false), formCreated = _b[0], setFormCreated = _b[1];\r\n    useEffect(function () {\r\n        if (typeof window !== 'undefined' && window) {\r\n            var windowWithHubspot = window;\r\n            if (loaded && windowWithHubspot.hbspt && !formCreated) {\r\n                windowWithHubspot.hbspt.forms.create(props);\r\n                setFormCreated(true);\r\n            }\r\n        }\r\n    }, [loaded, formCreated, setFormCreated]);\r\n    return { loaded: loaded, formCreated: formCreated, error: error };\r\n};\n\nexport { useHubspotForm };\n"]},"metadata":{},"sourceType":"module"}