{"ast":null,"code":"var _objectSpread = require(\"C:/Users/denis/OneDrive/Documents/GitHub/startupatblagoevgrad-website/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _defineProperty = require(\"C:/Users/denis/OneDrive/Documents/GitHub/startupatblagoevgrad-website/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\denis\\\\OneDrive\\\\Documents\\\\GitHub\\\\startupatblagoevgrad-website\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\");\n\nvar _asyncToGenerator = require(\"C:/Users/denis/OneDrive/Documents/GitHub/startupatblagoevgrad-website/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/denis/OneDrive/Documents/GitHub/startupatblagoevgrad-website/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/denis/OneDrive/Documents/GitHub/startupatblagoevgrad-website/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _ = require('lodash');\n\nvar _require = require('google-auth-library'),\n    JWT = _require.JWT;\n\nvar Axios = require('axios');\n\nvar GoogleSpreadsheetWorksheet = require('./GoogleSpreadsheetWorksheet');\n\nvar _require2 = require('./utils'),\n    getFieldMask = _require2.getFieldMask;\n\nvar GOOGLE_AUTH_SCOPES = ['https://www.googleapis.com/auth/spreadsheets' // the list from the sheets v4 auth for spreadsheets.get\n// 'https://www.googleapis.com/auth/drive',\n// 'https://www.googleapis.com/auth/drive.readonly',\n// 'https://www.googleapis.com/auth/drive.file',\n// 'https://www.googleapis.com/auth/spreadsheets',\n// 'https://www.googleapis.com/auth/spreadsheets.readonly',\n];\nvar AUTH_MODES = {\n  JWT: 'JWT',\n  API_KEY: 'API_KEY',\n  RAW_ACCESS_TOKEN: 'RAW_ACCESS_TOKEN',\n  OAUTH: 'OAUTH'\n};\n\nvar GoogleSpreadsheet = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function GoogleSpreadsheet(sheetId) {\n    _classCallCheck(this, GoogleSpreadsheet);\n\n    this.spreadsheetId = sheetId;\n    this.authMode = null;\n    this._rawSheets = {};\n    this._rawProperties = null;\n    this._spreadsheetUrl = null; // create an axios instance with sheet root URL and interceptors to handle auth\n\n    this.axios = Axios.create({\n      baseURL: \"https://sheets.googleapis.com/v4/spreadsheets/\".concat(sheetId || ''),\n      // send arrays in params with duplicate keys - ie `?thing=1&thing=2` vs `?thing[]=1...`\n      // solution taken from https://github.com/axios/axios/issues/604\n      paramsSerializer: function paramsSerializer(params) {\n        var options = '';\n\n        _.keys(params).forEach(function (key) {\n          var isParamTypeObject = typeof params[key] === 'object';\n          var isParamTypeArray = isParamTypeObject && params[key].length >= 0;\n          if (!isParamTypeObject) options += \"\".concat(key, \"=\").concat(encodeURIComponent(params[key]), \"&\");\n\n          if (isParamTypeObject && isParamTypeArray) {\n            _.each(params[key], function (val) {\n              options += \"\".concat(key, \"=\").concat(encodeURIComponent(val), \"&\");\n            });\n          }\n        });\n\n        return options ? options.slice(0, -1) : options;\n      }\n    }); // have to use bind here or the functions dont have access to `this` :(\n\n    this.axios.interceptors.request.use(this._setAxiosRequestAuth.bind(this));\n    this.axios.interceptors.response.use(this._handleAxiosResponse.bind(this), this._handleAxiosErrors.bind(this));\n    return this;\n  } // CREATE NEW DOC ////////////////////////////////////////////////////////////////////////////////\n\n\n  _createClass(GoogleSpreadsheet, [{\n    key: \"createNewSpreadsheetDocument\",\n    value: function () {\n      var _createNewSpreadsheetDocument = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(properties) {\n        var _this = this;\n\n        var response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this.spreadsheetId) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw new Error('Only call `createNewSpreadsheetDocument()` on a GoogleSpreadsheet object that has no spreadsheetId set');\n\n              case 2:\n                _context.next = 4;\n                return this.axios.post(this.url, {\n                  properties: properties\n                });\n\n              case 4:\n                response = _context.sent;\n                this.spreadsheetId = response.data.spreadsheetId;\n                this.axios.defaults.baseURL += this.spreadsheetId;\n                this._rawProperties = response.data.properties;\n\n                _.each(response.data.sheets, function (s) {\n                  return _this._updateOrCreateSheet(s);\n                });\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function createNewSpreadsheetDocument(_x) {\n        return _createNewSpreadsheetDocument.apply(this, arguments);\n      }\n\n      return createNewSpreadsheetDocument;\n    }() // AUTH RELATED FUNCTIONS ////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"useApiKey\",\n    value: function () {\n      var _useApiKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(key) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.authMode = AUTH_MODES.API_KEY;\n                this.apiKey = key;\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function useApiKey(_x2) {\n        return _useApiKey.apply(this, arguments);\n      }\n\n      return useApiKey;\n    }() // token must be created and managed (refreshed) elsewhere\n\n  }, {\n    key: \"useRawAccessToken\",\n    value: function () {\n      var _useRawAccessToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(token) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.authMode = AUTH_MODES.RAW_ACCESS_TOKEN;\n                this.accessToken = token;\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function useRawAccessToken(_x3) {\n        return _useRawAccessToken.apply(this, arguments);\n      }\n\n      return useRawAccessToken;\n    }()\n  }, {\n    key: \"useOAuth2Client\",\n    value: function () {\n      var _useOAuth2Client = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(oAuth2Client) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this.authMode = AUTH_MODES.OAUTH;\n                this.oAuth2Client = oAuth2Client;\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function useOAuth2Client(_x4) {\n        return _useOAuth2Client.apply(this, arguments);\n      }\n\n      return useOAuth2Client;\n    }() // creds should be an object obtained by loading the json file google gives you\n    // impersonateAs is an email of any user in the G Suite domain\n    // (only works if service account has domain-wide delegation enabled)\n\n  }, {\n    key: \"useServiceAccountAuth\",\n    value: function () {\n      var _useServiceAccountAuth = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(creds) {\n        var impersonateAs,\n            _args5 = arguments;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                impersonateAs = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : null;\n                this.jwtClient = new JWT({\n                  email: creds.client_email,\n                  key: creds.private_key,\n                  scopes: GOOGLE_AUTH_SCOPES,\n                  subject: impersonateAs\n                });\n                _context5.next = 4;\n                return this.renewJwtAuth();\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function useServiceAccountAuth(_x5) {\n        return _useServiceAccountAuth.apply(this, arguments);\n      }\n\n      return useServiceAccountAuth;\n    }()\n  }, {\n    key: \"renewJwtAuth\",\n    value: function () {\n      var _renewJwtAuth = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                this.authMode = AUTH_MODES.JWT;\n                _context6.next = 3;\n                return this.jwtClient.authorize();\n\n              case 3:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function renewJwtAuth() {\n        return _renewJwtAuth.apply(this, arguments);\n      }\n\n      return renewJwtAuth;\n    }() // TODO: provide mechanism to share single JWT auth between docs?\n    // INTERNAL UTILITY FUNCTIONS ////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"_setAxiosRequestAuth\",\n    value: function () {\n      var _setAxiosRequestAuth2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(config) {\n        var credentials;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (!(this.authMode === AUTH_MODES.JWT)) {\n                  _context7.next = 8;\n                  break;\n                }\n\n                if (this.jwtClient) {\n                  _context7.next = 3;\n                  break;\n                }\n\n                throw new Error('JWT auth is not set up properly');\n\n              case 3:\n                _context7.next = 5;\n                return this.jwtClient.authorize();\n\n              case 5:\n                config.headers.Authorization = \"Bearer \".concat(this.jwtClient.credentials.access_token);\n                _context7.next = 29;\n                break;\n\n              case 8:\n                if (!(this.authMode === AUTH_MODES.RAW_ACCESS_TOKEN)) {\n                  _context7.next = 14;\n                  break;\n                }\n\n                if (this.accessToken) {\n                  _context7.next = 11;\n                  break;\n                }\n\n                throw new Error('Invalid access token');\n\n              case 11:\n                config.headers.Authorization = \"Bearer \".concat(this.accessToken);\n                _context7.next = 29;\n                break;\n\n              case 14:\n                if (!(this.authMode === AUTH_MODES.API_KEY)) {\n                  _context7.next = 21;\n                  break;\n                }\n\n                if (this.apiKey) {\n                  _context7.next = 17;\n                  break;\n                }\n\n                throw new Error('Please set API key');\n\n              case 17:\n                config.params = config.params || {};\n                config.params.key = this.apiKey;\n                _context7.next = 29;\n                break;\n\n              case 21:\n                if (!(this.authMode === AUTH_MODES.OAUTH)) {\n                  _context7.next = 28;\n                  break;\n                }\n\n                _context7.next = 24;\n                return this.oAuth2Client.getAccessToken();\n\n              case 24:\n                credentials = _context7.sent;\n                config.headers.Authorization = \"Bearer \".concat(credentials.token);\n                _context7.next = 29;\n                break;\n\n              case 28:\n                throw new Error('You must initialize some kind of auth before making any requests');\n\n              case 29:\n                return _context7.abrupt(\"return\", config);\n\n              case 30:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function _setAxiosRequestAuth(_x6) {\n        return _setAxiosRequestAuth2.apply(this, arguments);\n      }\n\n      return _setAxiosRequestAuth;\n    }()\n  }, {\n    key: \"_handleAxiosResponse\",\n    value: function () {\n      var _handleAxiosResponse2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(response) {\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                return _context8.abrupt(\"return\", response);\n\n              case 1:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n\n      function _handleAxiosResponse(_x7) {\n        return _handleAxiosResponse2.apply(this, arguments);\n      }\n\n      return _handleAxiosResponse;\n    }()\n  }, {\n    key: \"_handleAxiosErrors\",\n    value: function () {\n      var _handleAxiosErrors2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(error) {\n        var _error$response$data$, code, message;\n\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                if (!(error.response && error.response.data)) {\n                  _context9.next = 6;\n                  break;\n                }\n\n                if (error.response.data.error) {\n                  _context9.next = 3;\n                  break;\n                }\n\n                throw error;\n\n              case 3:\n                _error$response$data$ = error.response.data.error, code = _error$response$data$.code, message = _error$response$data$.message;\n                error.message = \"Google API error - [\".concat(code, \"] \").concat(message);\n                throw error;\n\n              case 6:\n                if (!(_.get(error, 'response.status') === 403)) {\n                  _context9.next = 9;\n                  break;\n                }\n\n                if (!(this.authMode === AUTH_MODES.API_KEY)) {\n                  _context9.next = 9;\n                  break;\n                }\n\n                throw new Error('Sheet is private. Use authentication or make public. (see https://github.com/theoephraim/node-google-spreadsheet#a-note-on-authentication for details)');\n\n              case 9:\n                throw error;\n\n              case 10:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function _handleAxiosErrors(_x8) {\n        return _handleAxiosErrors2.apply(this, arguments);\n      }\n\n      return _handleAxiosErrors;\n    }()\n  }, {\n    key: \"_makeSingleUpdateRequest\",\n    value: function () {\n      var _makeSingleUpdateRequest2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(requestType, requestParams) {\n        var _this2 = this;\n\n        var response;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return this.axios.post(':batchUpdate', {\n                  requests: [_defineProperty({}, requestType, requestParams)],\n                  includeSpreadsheetInResponse: true // responseRanges: [string]\n                  // responseIncludeGridData: true\n\n                });\n\n              case 2:\n                response = _context10.sent;\n\n                this._updateRawProperties(response.data.updatedSpreadsheet.properties);\n\n                _.each(response.data.updatedSpreadsheet.sheets, function (s) {\n                  return _this2._updateOrCreateSheet(s);\n                }); // console.log('API RESPONSE', response.data.replies[0][requestType]);\n\n\n                return _context10.abrupt(\"return\", response.data.replies[0][requestType]);\n\n              case 6:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function _makeSingleUpdateRequest(_x9, _x10) {\n        return _makeSingleUpdateRequest2.apply(this, arguments);\n      }\n\n      return _makeSingleUpdateRequest;\n    }()\n  }, {\n    key: \"_makeBatchUpdateRequest\",\n    value: function () {\n      var _makeBatchUpdateRequest2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(requests, responseRanges) {\n        var _this3 = this;\n\n        var response;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return this.axios.post(':batchUpdate', _objectSpread({\n                  requests: requests,\n                  includeSpreadsheetInResponse: true\n                }, responseRanges && _objectSpread({\n                  responseIncludeGridData: true\n                }, responseRanges !== '*' && {\n                  responseRanges: responseRanges\n                })));\n\n              case 2:\n                response = _context11.sent;\n\n                this._updateRawProperties(response.data.updatedSpreadsheet.properties);\n\n                _.each(response.data.updatedSpreadsheet.sheets, function (s) {\n                  return _this3._updateOrCreateSheet(s);\n                });\n\n              case 5:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function _makeBatchUpdateRequest(_x11, _x12) {\n        return _makeBatchUpdateRequest2.apply(this, arguments);\n      }\n\n      return _makeBatchUpdateRequest;\n    }()\n  }, {\n    key: \"_ensureInfoLoaded\",\n    value: function _ensureInfoLoaded() {\n      if (!this._rawProperties) throw new Error('You must call `doc.loadInfo()` before accessing this property');\n    }\n  }, {\n    key: \"_updateRawProperties\",\n    value: function _updateRawProperties(newProperties) {\n      this._rawProperties = newProperties;\n    }\n  }, {\n    key: \"_updateOrCreateSheet\",\n    value: function _updateOrCreateSheet(_ref2) {\n      var properties = _ref2.properties,\n          data = _ref2.data;\n      var sheetId = properties.sheetId;\n\n      if (!this._rawSheets[sheetId]) {\n        this._rawSheets[sheetId] = new GoogleSpreadsheetWorksheet(this, {\n          properties: properties,\n          data: data\n        });\n      } else {\n        this._rawSheets[sheetId]._rawProperties = properties;\n\n        this._rawSheets[sheetId]._fillCellData(data);\n      }\n    } // BASIC PROPS //////////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"_getProp\",\n    value: function _getProp(param) {\n      this._ensureInfoLoaded();\n\n      return this._rawProperties[param];\n    }\n  }, {\n    key: \"_setProp\",\n    value: function _setProp(param, newVal) {\n      // eslint-disable-line no-unused-vars\n      throw new Error('Do not update directly - use `updateProperties()`');\n    }\n  }, {\n    key: \"title\",\n    get: function get() {\n      return this._getProp('title');\n    },\n    set: function set(newVal) {\n      this._setProp('title', newVal);\n    }\n  }, {\n    key: \"locale\",\n    get: function get() {\n      return this._getProp('locale');\n    },\n    set: function set(newVal) {\n      this._setProp('locale', newVal);\n    }\n  }, {\n    key: \"timeZone\",\n    get: function get() {\n      return this._getProp('timeZone');\n    },\n    set: function set(newVal) {\n      this._setProp('timeZone', newVal);\n    }\n  }, {\n    key: \"autoRecalc\",\n    get: function get() {\n      return this._getProp('autoRecalc');\n    },\n    set: function set(newVal) {\n      this._setProp('autoRecalc', newVal);\n    }\n  }, {\n    key: \"defaultFormat\",\n    get: function get() {\n      return this._getProp('defaultFormat');\n    },\n    set: function set(newVal) {\n      this._setProp('defaultFormat', newVal);\n    }\n  }, {\n    key: \"spreadsheetTheme\",\n    get: function get() {\n      return this._getProp('spreadsheetTheme');\n    },\n    set: function set(newVal) {\n      this._setProp('spreadsheetTheme', newVal);\n    }\n  }, {\n    key: \"iterativeCalculationSettings\",\n    get: function get() {\n      return this._getProp('iterativeCalculationSettings');\n    },\n    set: function set(newVal) {\n      this._setProp('iterativeCalculationSettings', newVal);\n    }\n  }, {\n    key: \"updateProperties\",\n    value: function () {\n      var _updateProperties = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(properties) {\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                _context12.next = 2;\n                return this._makeSingleUpdateRequest('updateSpreadsheetProperties', {\n                  properties: properties,\n                  fields: getFieldMask(properties)\n                });\n\n              case 2:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function updateProperties(_x13) {\n        return _updateProperties.apply(this, arguments);\n      }\n\n      return updateProperties;\n    }() // BASIC INFO ////////////////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"loadInfo\",\n    value: function () {\n      var _loadInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(includeCells) {\n        var _this4 = this;\n\n        var response;\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.next = 2;\n                return this.axios.get('/', {\n                  params: _objectSpread({}, includeCells && {\n                    includeGridData: true\n                  })\n                });\n\n              case 2:\n                response = _context13.sent;\n                this._spreadsheetUrl = response.data.spreadsheetUrl;\n                this._rawProperties = response.data.properties;\n\n                _.each(response.data.sheets, function (s) {\n                  return _this4._updateOrCreateSheet(s);\n                });\n\n              case 6:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function loadInfo(_x14) {\n        return _loadInfo.apply(this, arguments);\n      }\n\n      return loadInfo;\n    }()\n  }, {\n    key: \"getInfo\",\n    value: function () {\n      var _getInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                return _context14.abrupt(\"return\", this.loadInfo());\n\n              case 1:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function getInfo() {\n        return _getInfo.apply(this, arguments);\n      }\n\n      return getInfo;\n    }() // alias to mimic old version\n\n  }, {\n    key: \"resetLocalCache\",\n    value: function resetLocalCache() {\n      this._rawProperties = null;\n      this._rawSheets = {};\n    } // WORKSHEETS ////////////////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"sheetCount\",\n    get: function get() {\n      this._ensureInfoLoaded();\n\n      return _.values(this._rawSheets).length;\n    }\n  }, {\n    key: \"sheetsById\",\n    get: function get() {\n      this._ensureInfoLoaded();\n\n      return this._rawSheets;\n    }\n  }, {\n    key: \"sheetsByIndex\",\n    get: function get() {\n      this._ensureInfoLoaded();\n\n      return _.sortBy(this._rawSheets, 'index');\n    }\n  }, {\n    key: \"sheetsByTitle\",\n    get: function get() {\n      this._ensureInfoLoaded();\n\n      return _.keyBy(this._rawSheets, 'title');\n    }\n  }, {\n    key: \"addSheet\",\n    value: function () {\n      var _addSheet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15() {\n        var properties,\n            response,\n            newSheetId,\n            newSheet,\n            headers,\n            _args15 = arguments;\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                properties = _args15.length > 0 && _args15[0] !== undefined ? _args15[0] : {};\n                _context15.next = 3;\n                return this._makeSingleUpdateRequest('addSheet', {\n                  properties: _.omit(properties, 'headers', 'headerValues', 'headerRowIndex')\n                });\n\n              case 3:\n                response = _context15.sent;\n                // _makeSingleUpdateRequest already adds the sheet\n                newSheetId = response.properties.sheetId;\n                newSheet = this.sheetsById[newSheetId]; // allow it to work with `.headers` but `.headerValues` is the real prop\n\n                headers = properties.headerValues || properties.headers;\n\n                if (!headers) {\n                  _context15.next = 10;\n                  break;\n                }\n\n                _context15.next = 10;\n                return newSheet.setHeaderRow(headers, properties.headerRowIndex);\n\n              case 10:\n                return _context15.abrupt(\"return\", newSheet);\n\n              case 11:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function addSheet() {\n        return _addSheet.apply(this, arguments);\n      }\n\n      return addSheet;\n    }()\n  }, {\n    key: \"addWorksheet\",\n    value: function () {\n      var _addWorksheet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(properties) {\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                return _context16.abrupt(\"return\", this.addSheet(properties));\n\n              case 1:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function addWorksheet(_x15) {\n        return _addWorksheet.apply(this, arguments);\n      }\n\n      return addWorksheet;\n    }() // alias to mimic old version\n\n  }, {\n    key: \"deleteSheet\",\n    value: function () {\n      var _deleteSheet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(sheetId) {\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                _context17.next = 2;\n                return this._makeSingleUpdateRequest('deleteSheet', {\n                  sheetId: sheetId\n                });\n\n              case 2:\n                delete this._rawSheets[sheetId];\n\n              case 3:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function deleteSheet(_x16) {\n        return _deleteSheet.apply(this, arguments);\n      }\n\n      return deleteSheet;\n    }() // NAMED RANGES //////////////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"addNamedRange\",\n    value: function () {\n      var _addNamedRange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(name, range, namedRangeId) {\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                return _context18.abrupt(\"return\", this._makeSingleUpdateRequest('addNamedRange', {\n                  name: name,\n                  range: range,\n                  namedRangeId: namedRangeId\n                }));\n\n              case 1:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function addNamedRange(_x17, _x18, _x19) {\n        return _addNamedRange.apply(this, arguments);\n      }\n\n      return addNamedRange;\n    }()\n  }, {\n    key: \"deleteNamedRange\",\n    value: function () {\n      var _deleteNamedRange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(namedRangeId) {\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                return _context19.abrupt(\"return\", this._makeSingleUpdateRequest('deleteNamedRange', {\n                  namedRangeId: namedRangeId\n                }));\n\n              case 1:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      function deleteNamedRange(_x20) {\n        return _deleteNamedRange.apply(this, arguments);\n      }\n\n      return deleteNamedRange;\n    }() // LOADING CELLS /////////////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"loadCells\",\n    value: function () {\n      var _loadCells = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20(filters) {\n        var _this5 = this;\n\n        var readOnlyMode, filtersArray, dataFilters, result, sheets;\n        return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                // you can pass in a single filter or an array of filters\n                // strings are treated as a1 ranges\n                // objects are treated as GridRange objects\n                // TODO: make it support DeveloperMetadataLookup objects\n                // TODO: switch to this mode if using a read-only auth token?\n                readOnlyMode = this.authMode === AUTH_MODES.API_KEY;\n                filtersArray = _.isArray(filters) ? filters : [filters];\n                dataFilters = _.map(filtersArray, function (filter) {\n                  if (_.isString(filter)) {\n                    return readOnlyMode ? filter : {\n                      a1Range: filter\n                    };\n                  }\n\n                  if (_.isObject(filter)) {\n                    if (readOnlyMode) {\n                      throw new Error('Only A1 ranges are supported when fetching cells with read-only access (using only an API key)');\n                    } // TODO: make this support Developer Metadata filters\n\n\n                    return {\n                      gridRange: filter\n                    };\n                  }\n\n                  throw new Error('Each filter must be an A1 range string or a gridrange object');\n                });\n\n                if (!(this.authMode === AUTH_MODES.API_KEY)) {\n                  _context20.next = 9;\n                  break;\n                }\n\n                _context20.next = 6;\n                return this.axios.get('/', {\n                  params: {\n                    includeGridData: true,\n                    ranges: dataFilters\n                  }\n                });\n\n              case 6:\n                result = _context20.sent;\n                _context20.next = 12;\n                break;\n\n              case 9:\n                _context20.next = 11;\n                return this.axios.post(':getByDataFilter', {\n                  includeGridData: true,\n                  dataFilters: dataFilters\n                });\n\n              case 11:\n                result = _context20.sent;\n\n              case 12:\n                sheets = result.data.sheets;\n\n                _.each(sheets, function (sheet) {\n                  _this5._updateOrCreateSheet(sheet);\n                });\n\n              case 14:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n\n      function loadCells(_x21) {\n        return _loadCells.apply(this, arguments);\n      }\n\n      return loadCells;\n    }() // EXPORTING /////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"_downloadAs\",\n    value: function () {\n      var _downloadAs2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(fileType, worksheetId, returnStreamInsteadOfBuffer) {\n        var exportUrl, response;\n        return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                if (!['html', 'xlsx', 'ods'].includes(fileType)) {\n                  _context21.next = 5;\n                  break;\n                }\n\n                if (!worksheetId) {\n                  _context21.next = 3;\n                  break;\n                }\n\n                throw new Error(\"Cannot specify worksheetId when exporting as \".concat(fileType));\n\n              case 3:\n                _context21.next = 11;\n                break;\n\n              case 5:\n                if (!['csv', 'tsv', 'pdf'].includes(fileType)) {\n                  _context21.next = 10;\n                  break;\n                }\n\n                if (!(worksheetId === undefined)) {\n                  _context21.next = 8;\n                  break;\n                }\n\n                throw new Error(\"Must specify worksheetId when exporting as \".concat(fileType));\n\n              case 8:\n                _context21.next = 11;\n                break;\n\n              case 10:\n                throw new Error(\"unsupported export fileType - \".concat(fileType));\n\n              case 11:\n                // google UI shows \"html\" but passes through \"zip\"\n                if (fileType === 'html') fileType = 'zip';\n                exportUrl = this._spreadsheetUrl.replace('/edit', '/export');\n                _context21.next = 15;\n                return this.axios.get(exportUrl, {\n                  baseUrl: '',\n                  // unset baseUrl since we're not hitting the normal sheets API\n                  params: _objectSpread({\n                    id: this.spreadsheetId,\n                    format: fileType\n                  }, worksheetId && {\n                    gid: worksheetId\n                  }),\n                  responseType: returnStreamInsteadOfBuffer ? 'stream' : 'arraybuffer'\n                });\n\n              case 15:\n                response = _context21.sent;\n                return _context21.abrupt(\"return\", response.data);\n\n              case 17:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n\n      function _downloadAs(_x22, _x23, _x24) {\n        return _downloadAs2.apply(this, arguments);\n      }\n\n      return _downloadAs;\n    }()\n  }, {\n    key: \"downloadAsHTML\",\n    value: function () {\n      var _downloadAsHTML = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22() {\n        var returnStreamInsteadOfBuffer,\n            _args22 = arguments;\n        return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                returnStreamInsteadOfBuffer = _args22.length > 0 && _args22[0] !== undefined ? _args22[0] : false;\n                return _context22.abrupt(\"return\", this._downloadAs('html', null, returnStreamInsteadOfBuffer));\n\n              case 2:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this);\n      }));\n\n      function downloadAsHTML() {\n        return _downloadAsHTML.apply(this, arguments);\n      }\n\n      return downloadAsHTML;\n    }()\n  }, {\n    key: \"downloadAsXLSX\",\n    value: function () {\n      var _downloadAsXLSX = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23() {\n        var returnStreamInsteadOfBuffer,\n            _args23 = arguments;\n        return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                returnStreamInsteadOfBuffer = _args23.length > 0 && _args23[0] !== undefined ? _args23[0] : false;\n                return _context23.abrupt(\"return\", this._downloadAs('xlsx', null, returnStreamInsteadOfBuffer));\n\n              case 2:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n\n      function downloadAsXLSX() {\n        return _downloadAsXLSX.apply(this, arguments);\n      }\n\n      return downloadAsXLSX;\n    }()\n  }, {\n    key: \"downloadAsODS\",\n    value: function () {\n      var _downloadAsODS = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24() {\n        var returnStreamInsteadOfBuffer,\n            _args24 = arguments;\n        return _regeneratorRuntime.wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                returnStreamInsteadOfBuffer = _args24.length > 0 && _args24[0] !== undefined ? _args24[0] : false;\n                return _context24.abrupt(\"return\", this._downloadAs('ods', null, returnStreamInsteadOfBuffer));\n\n              case 2:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24, this);\n      }));\n\n      function downloadAsODS() {\n        return _downloadAsODS.apply(this, arguments);\n      }\n\n      return downloadAsODS;\n    }()\n  }]);\n\n  return GoogleSpreadsheet;\n}();\n\nmodule.exports = GoogleSpreadsheet;","map":{"version":3,"sources":["C:/Users/denis/OneDrive/Documents/GitHub/startupatblagoevgrad-website/node_modules/google-spreadsheet/lib/GoogleSpreadsheet.js"],"names":["_","require","JWT","Axios","GoogleSpreadsheetWorksheet","getFieldMask","GOOGLE_AUTH_SCOPES","AUTH_MODES","API_KEY","RAW_ACCESS_TOKEN","OAUTH","GoogleSpreadsheet","sheetId","spreadsheetId","authMode","_rawSheets","_rawProperties","_spreadsheetUrl","axios","create","baseURL","paramsSerializer","params","options","keys","forEach","key","isParamTypeObject","isParamTypeArray","length","encodeURIComponent","each","val","slice","interceptors","request","use","_setAxiosRequestAuth","bind","response","_handleAxiosResponse","_handleAxiosErrors","properties","Error","post","url","data","defaults","sheets","s","_updateOrCreateSheet","apiKey","token","accessToken","oAuth2Client","creds","impersonateAs","jwtClient","email","client_email","private_key","scopes","subject","renewJwtAuth","authorize","config","headers","Authorization","credentials","access_token","getAccessToken","error","code","message","get","requestType","requestParams","requests","includeSpreadsheetInResponse","_updateRawProperties","updatedSpreadsheet","replies","responseRanges","responseIncludeGridData","newProperties","_fillCellData","param","_ensureInfoLoaded","newVal","_getProp","_setProp","_makeSingleUpdateRequest","fields","includeCells","includeGridData","spreadsheetUrl","loadInfo","values","sortBy","keyBy","omit","newSheetId","newSheet","sheetsById","headerValues","setHeaderRow","headerRowIndex","addSheet","name","range","namedRangeId","filters","readOnlyMode","filtersArray","isArray","dataFilters","map","filter","isString","a1Range","isObject","gridRange","ranges","result","sheet","fileType","worksheetId","returnStreamInsteadOfBuffer","includes","undefined","exportUrl","replace","baseUrl","id","format","gid","responseType","_downloadAs","module","exports"],"mappings":"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","sourcesContent":["const _ = require('lodash');\nconst { JWT } = require('google-auth-library');\nconst Axios = require('axios');\n\nconst GoogleSpreadsheetWorksheet = require('./GoogleSpreadsheetWorksheet');\nconst { getFieldMask } = require('./utils');\n\nconst GOOGLE_AUTH_SCOPES = [\n  'https://www.googleapis.com/auth/spreadsheets',\n\n  // the list from the sheets v4 auth for spreadsheets.get\n  // 'https://www.googleapis.com/auth/drive',\n  // 'https://www.googleapis.com/auth/drive.readonly',\n  // 'https://www.googleapis.com/auth/drive.file',\n  // 'https://www.googleapis.com/auth/spreadsheets',\n  // 'https://www.googleapis.com/auth/spreadsheets.readonly',\n];\n\nconst AUTH_MODES = {\n  JWT: 'JWT',\n  API_KEY: 'API_KEY',\n  RAW_ACCESS_TOKEN: 'RAW_ACCESS_TOKEN',\n  OAUTH: 'OAUTH',\n};\n\nclass GoogleSpreadsheet {\n  constructor(sheetId) {\n    this.spreadsheetId = sheetId;\n    this.authMode = null;\n    this._rawSheets = {};\n    this._rawProperties = null;\n    this._spreadsheetUrl = null;\n\n    // create an axios instance with sheet root URL and interceptors to handle auth\n    this.axios = Axios.create({\n      baseURL: `https://sheets.googleapis.com/v4/spreadsheets/${sheetId || ''}`,\n      // send arrays in params with duplicate keys - ie `?thing=1&thing=2` vs `?thing[]=1...`\n      // solution taken from https://github.com/axios/axios/issues/604\n      paramsSerializer(params) {\n        let options = '';\n        _.keys(params).forEach((key) => {\n          const isParamTypeObject = typeof params[key] === 'object';\n          const isParamTypeArray = isParamTypeObject && (params[key].length >= 0);\n          if (!isParamTypeObject) options += `${key}=${encodeURIComponent(params[key])}&`;\n          if (isParamTypeObject && isParamTypeArray) {\n            _.each(params[key], (val) => {\n              options += `${key}=${encodeURIComponent(val)}&`;\n            });\n          }\n        });\n        return options ? options.slice(0, -1) : options;\n      },\n    });\n    // have to use bind here or the functions dont have access to `this` :(\n    this.axios.interceptors.request.use(this._setAxiosRequestAuth.bind(this));\n    this.axios.interceptors.response.use(\n      this._handleAxiosResponse.bind(this),\n      this._handleAxiosErrors.bind(this)\n    );\n\n    return this;\n  }\n\n  // CREATE NEW DOC ////////////////////////////////////////////////////////////////////////////////\n  async createNewSpreadsheetDocument(properties) {\n    // see updateProperties for more info about available properties\n\n    if (this.spreadsheetId) {\n      throw new Error('Only call `createNewSpreadsheetDocument()` on a GoogleSpreadsheet object that has no spreadsheetId set');\n    }\n    const response = await this.axios.post(this.url, {\n      properties,\n    });\n    this.spreadsheetId = response.data.spreadsheetId;\n    this.axios.defaults.baseURL += this.spreadsheetId;\n\n    this._rawProperties = response.data.properties;\n    _.each(response.data.sheets, (s) => this._updateOrCreateSheet(s));\n  }\n\n  // AUTH RELATED FUNCTIONS ////////////////////////////////////////////////////////////////////////\n  async useApiKey(key) {\n    this.authMode = AUTH_MODES.API_KEY;\n    this.apiKey = key;\n  }\n\n  // token must be created and managed (refreshed) elsewhere\n  async useRawAccessToken(token) {\n    this.authMode = AUTH_MODES.RAW_ACCESS_TOKEN;\n    this.accessToken = token;\n  }\n\n  async useOAuth2Client(oAuth2Client) {\n    this.authMode = AUTH_MODES.OAUTH;\n    this.oAuth2Client = oAuth2Client;\n  }\n\n  // creds should be an object obtained by loading the json file google gives you\n  // impersonateAs is an email of any user in the G Suite domain\n  // (only works if service account has domain-wide delegation enabled)\n  async useServiceAccountAuth(creds, impersonateAs = null) {\n    this.jwtClient = new JWT({\n      email: creds.client_email,\n      key: creds.private_key,\n      scopes: GOOGLE_AUTH_SCOPES,\n      subject: impersonateAs,\n    });\n    await this.renewJwtAuth();\n  }\n\n  async renewJwtAuth() {\n    this.authMode = AUTH_MODES.JWT;\n    await this.jwtClient.authorize();\n    /*\n    returned token looks like\n      {\n        access_token: 'secret-token...',\n        token_type: 'Bearer',\n        expiry_date: 1576005020000,\n        id_token: undefined,\n        refresh_token: 'jwt-placeholder'\n      }\n    */\n  }\n\n  // TODO: provide mechanism to share single JWT auth between docs?\n\n  // INTERNAL UTILITY FUNCTIONS ////////////////////////////////////////////////////////////////////\n  async _setAxiosRequestAuth(config) {\n    // TODO: check auth mode, if valid, renew if expired, etc\n    if (this.authMode === AUTH_MODES.JWT) {\n      if (!this.jwtClient) throw new Error('JWT auth is not set up properly');\n      // this seems to do the right thing and only renew the token if expired\n      await this.jwtClient.authorize();\n      config.headers.Authorization = `Bearer ${this.jwtClient.credentials.access_token}`;\n    } else if (this.authMode === AUTH_MODES.RAW_ACCESS_TOKEN) {\n      if (!this.accessToken) throw new Error('Invalid access token');\n      config.headers.Authorization = `Bearer ${this.accessToken}`;\n    } else if (this.authMode === AUTH_MODES.API_KEY) {\n      if (!this.apiKey) throw new Error('Please set API key');\n      config.params = config.params || {};\n      config.params.key = this.apiKey;\n    } else if (this.authMode === AUTH_MODES.OAUTH) {\n      const credentials = await this.oAuth2Client.getAccessToken();\n      config.headers.Authorization = `Bearer ${credentials.token}`;\n    } else {\n      throw new Error('You must initialize some kind of auth before making any requests');\n    }\n    return config;\n  }\n\n  async _handleAxiosResponse(response) { return response; }\n  async _handleAxiosErrors(error) {\n    // console.log(error);\n    if (error.response && error.response.data) {\n      // usually the error has a code and message, but occasionally not\n      if (!error.response.data.error) throw error;\n\n      const { code, message } = error.response.data.error;\n      error.message = `Google API error - [${code}] ${message}`;\n      throw error;\n    }\n\n    if (_.get(error, 'response.status') === 403) {\n      if (this.authMode === AUTH_MODES.API_KEY) {\n        throw new Error('Sheet is private. Use authentication or make public. (see https://github.com/theoephraim/node-google-spreadsheet#a-note-on-authentication for details)');\n      }\n    }\n    throw error;\n  }\n\n  async _makeSingleUpdateRequest(requestType, requestParams) {\n    const response = await this.axios.post(':batchUpdate', {\n      requests: [{ [requestType]: requestParams }],\n      includeSpreadsheetInResponse: true,\n      // responseRanges: [string]\n      // responseIncludeGridData: true\n    });\n\n    this._updateRawProperties(response.data.updatedSpreadsheet.properties);\n    _.each(response.data.updatedSpreadsheet.sheets, (s) => this._updateOrCreateSheet(s));\n    // console.log('API RESPONSE', response.data.replies[0][requestType]);\n    return response.data.replies[0][requestType];\n  }\n\n  async _makeBatchUpdateRequest(requests, responseRanges) {\n    // this is used for updating batches of cells\n    const response = await this.axios.post(':batchUpdate', {\n      requests,\n      includeSpreadsheetInResponse: true,\n      ...responseRanges && {\n        responseIncludeGridData: true,\n        ...responseRanges !== '*' && { responseRanges },\n      },\n    });\n\n    this._updateRawProperties(response.data.updatedSpreadsheet.properties);\n    _.each(response.data.updatedSpreadsheet.sheets, (s) => this._updateOrCreateSheet(s));\n  }\n\n  _ensureInfoLoaded() {\n    if (!this._rawProperties) throw new Error('You must call `doc.loadInfo()` before accessing this property');\n  }\n\n  _updateRawProperties(newProperties) { this._rawProperties = newProperties; }\n\n  _updateOrCreateSheet({ properties, data }) {\n    const { sheetId } = properties;\n    if (!this._rawSheets[sheetId]) {\n      this._rawSheets[sheetId] = new GoogleSpreadsheetWorksheet(this, { properties, data });\n    } else {\n      this._rawSheets[sheetId]._rawProperties = properties;\n      this._rawSheets[sheetId]._fillCellData(data);\n    }\n  }\n\n  // BASIC PROPS //////////////////////////////////////////////////////////////////////////////\n  _getProp(param) {\n    this._ensureInfoLoaded();\n    return this._rawProperties[param];\n  }\n  _setProp(param, newVal) { // eslint-disable-line no-unused-vars\n    throw new Error('Do not update directly - use `updateProperties()`');\n  }\n\n  get title() { return this._getProp('title'); }\n  get locale() { return this._getProp('locale'); }\n  get timeZone() { return this._getProp('timeZone'); }\n  get autoRecalc() { return this._getProp('autoRecalc'); }\n  get defaultFormat() { return this._getProp('defaultFormat'); }\n  get spreadsheetTheme() { return this._getProp('spreadsheetTheme'); }\n  get iterativeCalculationSettings() { return this._getProp('iterativeCalculationSettings'); }\n\n  set title(newVal) { this._setProp('title', newVal); }\n  set locale(newVal) { this._setProp('locale', newVal); }\n  set timeZone(newVal) { this._setProp('timeZone', newVal); }\n  set autoRecalc(newVal) { this._setProp('autoRecalc', newVal); }\n  set defaultFormat(newVal) { this._setProp('defaultFormat', newVal); }\n  set spreadsheetTheme(newVal) { this._setProp('spreadsheetTheme', newVal); }\n  set iterativeCalculationSettings(newVal) { this._setProp('iterativeCalculationSettings', newVal); }\n\n  async updateProperties(properties) {\n    // updateSpreadsheetProperties\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets#SpreadsheetProperties\n\n    /*\n      title (string) - title of the spreadsheet\n      locale (string) - ISO code\n      autoRecalc (enum) - ON_CHANGE|MINUTE|HOUR\n      timeZone (string) - timezone code\n      iterativeCalculationSettings (object) - see https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets#IterativeCalculationSettings\n     */\n\n    await this._makeSingleUpdateRequest('updateSpreadsheetProperties', {\n      properties,\n      fields: getFieldMask(properties),\n    });\n  }\n\n  // BASIC INFO ////////////////////////////////////////////////////////////////////////////////////\n  async loadInfo(includeCells) {\n    const response = await this.axios.get('/', {\n      params: {\n        ...includeCells && { includeGridData: true },\n      },\n    });\n    this._spreadsheetUrl = response.data.spreadsheetUrl;\n    this._rawProperties = response.data.properties;\n    _.each(response.data.sheets, (s) => this._updateOrCreateSheet(s));\n  }\n  async getInfo() { return this.loadInfo(); } // alias to mimic old version\n\n  resetLocalCache() {\n    this._rawProperties = null;\n    this._rawSheets = {};\n  }\n\n  // WORKSHEETS ////////////////////////////////////////////////////////////////////////////////////\n  get sheetCount() {\n    this._ensureInfoLoaded();\n    return _.values(this._rawSheets).length;\n  }\n\n  get sheetsById() {\n    this._ensureInfoLoaded();\n    return this._rawSheets;\n  }\n\n  get sheetsByIndex() {\n    this._ensureInfoLoaded();\n    return _.sortBy(this._rawSheets, 'index');\n  }\n\n  get sheetsByTitle() {\n    this._ensureInfoLoaded();\n    return _.keyBy(this._rawSheets, 'title');\n  }\n\n  async addSheet(properties = {}) {\n    // Request type = `addSheet`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddSheetRequest\n\n    const response = await this._makeSingleUpdateRequest('addSheet', {\n      properties: _.omit(properties, 'headers', 'headerValues', 'headerRowIndex'),\n    });\n    // _makeSingleUpdateRequest already adds the sheet\n    const newSheetId = response.properties.sheetId;\n    const newSheet = this.sheetsById[newSheetId];\n\n    // allow it to work with `.headers` but `.headerValues` is the real prop\n    const headers = properties.headerValues || properties.headers;\n    if (headers) {\n      await newSheet.setHeaderRow(headers, properties.headerRowIndex);\n    }\n\n    return newSheet;\n  }\n  async addWorksheet(properties) { return this.addSheet(properties); } // alias to mimic old version\n\n  async deleteSheet(sheetId) {\n    // Request type = `deleteSheet`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteSheetRequest\n    await this._makeSingleUpdateRequest('deleteSheet', { sheetId });\n    delete this._rawSheets[sheetId];\n  }\n\n  // NAMED RANGES //////////////////////////////////////////////////////////////////////////////////\n  async addNamedRange(name, range, namedRangeId) {\n    // namedRangeId is optional\n    return this._makeSingleUpdateRequest('addNamedRange', {\n      name,\n      range,\n      namedRangeId,\n    });\n  }\n\n  async deleteNamedRange(namedRangeId) {\n    return this._makeSingleUpdateRequest('deleteNamedRange', { namedRangeId });\n  }\n\n  // LOADING CELLS /////////////////////////////////////////////////////////////////////////////////\n  async loadCells(filters) {\n    // you can pass in a single filter or an array of filters\n    // strings are treated as a1 ranges\n    // objects are treated as GridRange objects\n    // TODO: make it support DeveloperMetadataLookup objects\n\n    // TODO: switch to this mode if using a read-only auth token?\n    const readOnlyMode = this.authMode === AUTH_MODES.API_KEY;\n\n    const filtersArray = _.isArray(filters) ? filters : [filters];\n    const dataFilters = _.map(filtersArray, (filter) => {\n      if (_.isString(filter)) {\n        return readOnlyMode ? filter : { a1Range: filter };\n      }\n      if (_.isObject(filter)) {\n        if (readOnlyMode) {\n          throw new Error('Only A1 ranges are supported when fetching cells with read-only access (using only an API key)');\n        }\n        // TODO: make this support Developer Metadata filters\n        return { gridRange: filter };\n      }\n      throw new Error('Each filter must be an A1 range string or a gridrange object');\n    });\n\n    let result;\n    // when using an API key only, we must use the regular get endpoint\n    // because :getByDataFilter requires higher access\n    if (this.authMode === AUTH_MODES.API_KEY) {\n      result = await this.axios.get('/', {\n        params: {\n          includeGridData: true,\n          ranges: dataFilters,\n        },\n      });\n    // otherwise we use the getByDataFilter endpoint because it is more flexible\n    } else {\n      result = await this.axios.post(':getByDataFilter', {\n        includeGridData: true,\n        dataFilters,\n      });\n    }\n\n    const { sheets } = result.data;\n    _.each(sheets, (sheet) => { this._updateOrCreateSheet(sheet); });\n  }\n\n  // EXPORTING /////////////////////////////////////////////////////////////\n  async _downloadAs(fileType, worksheetId, returnStreamInsteadOfBuffer) {\n    // see https://stackoverflow.com/questions/11619805/using-the-google-drive-api-to-download-a-spreadsheet-in-csv-format/51235960#51235960\n\n    if (['html', 'xlsx', 'ods'].includes(fileType)) {\n      if (worksheetId) throw new Error(`Cannot specify worksheetId when exporting as ${fileType}`);\n    } else if (['csv', 'tsv', 'pdf'].includes(fileType)) {\n      if (worksheetId === undefined) throw new Error(`Must specify worksheetId when exporting as ${fileType}`);\n    } else {\n      throw new Error(`unsupported export fileType - ${fileType}`);\n    }\n\n    // google UI shows \"html\" but passes through \"zip\"\n    if (fileType === 'html') fileType = 'zip';\n\n    const exportUrl = this._spreadsheetUrl.replace('/edit', '/export');\n    const response = await this.axios.get(exportUrl, {\n      baseUrl: '', // unset baseUrl since we're not hitting the normal sheets API\n      params: {\n        id: this.spreadsheetId,\n        format: fileType,\n        ...worksheetId && { gid: worksheetId },\n      },\n      responseType: returnStreamInsteadOfBuffer ? 'stream' : 'arraybuffer',\n    });\n    return response.data;\n  }\n  async downloadAsHTML(returnStreamInsteadOfBuffer = false) {\n    return this._downloadAs('html', null, returnStreamInsteadOfBuffer);\n  }\n  async downloadAsXLSX(returnStreamInsteadOfBuffer = false) {\n    return this._downloadAs('xlsx', null, returnStreamInsteadOfBuffer);\n  }\n  async downloadAsODS(returnStreamInsteadOfBuffer = false) {\n    return this._downloadAs('ods', null, returnStreamInsteadOfBuffer);\n  }\n}\n\nmodule.exports = GoogleSpreadsheet;\n"]},"metadata":{},"sourceType":"script"}