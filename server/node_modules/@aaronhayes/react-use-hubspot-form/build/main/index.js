'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');

// Hook
var cachedScripts = [];
function useScript(src) {
    var _a = react.useState(false), loaded = _a[0], setLoaded = _a[1];
    var _b = react.useState(false), error = _b[0], setError = _b[1];
    react.useEffect(function () {
        // If cachedScripts array already includes src that means another instance ...
        // ... of this hook already loaded this script, so no need to load again.
        if (cachedScripts.includes(src)) {
            setLoaded(true);
            setError(false);
        }
        else {
            cachedScripts.push(src);
            // Create script
            var script_1 = document.createElement('script');
            script_1.src = src;
            script_1.async = true;
            // Script event listener callbacks for load and error
            var onScriptLoad_1 = function () {
                setLoaded(true);
                setError(false);
            };
            var onScriptError_1 = function () {
                // Remove from cachedScripts we can try loading again
                var index = cachedScripts.indexOf(src);
                if (index >= 0) {
                    cachedScripts.splice(index, 1);
                }
                script_1.remove();
                setLoaded(true);
                setError(true);
            };
            script_1.addEventListener('load', onScriptLoad_1);
            script_1.addEventListener('error', onScriptError_1);
            // Add script to document body
            document.body.appendChild(script_1);
            // Remove event listeners on cleanup
            return function () {
                script_1.removeEventListener('load', onScriptLoad_1);
                script_1.removeEventListener('error', onScriptError_1);
            };
        }
    }, [src]); // Only re-run effect if script src changes
    return [loaded, error];
}

var useHubspotForm = function (props) {
    var _a = useScript('https://js.hsforms.net/forms/v2.js'), loaded = _a[0], error = _a[1];
    var _b = react.useState(false), formCreated = _b[0], setFormCreated = _b[1];
    react.useEffect(function () {
        if (typeof window !== 'undefined' && window) {
            var windowWithHubspot = window;
            if (loaded && windowWithHubspot.hbspt && !formCreated) {
                windowWithHubspot.hbspt.forms.create(props);
                setFormCreated(true);
            }
        }
    }, [loaded, formCreated, setFormCreated]);
    return { loaded: loaded, formCreated: formCreated, error: error };
};

exports.useHubspotForm = useHubspotForm;
